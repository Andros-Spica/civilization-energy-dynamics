# Quasi-Mathusian models

```{r}
library(deSolve)
library(ggplot2)
```

```{r}
plotScale = 2
```

## Shenderov models

Based on MATHLAB implementation files Quasi_Mathus.m, Mathus2.m, Thetaq.m.

### Shenderov model (v2, increasing EROI)

#### Description

$$
\frac{dN}{dt} = k_{Malthus} * N(t) * (k_{conversion} * (\theta_{t} - 1) * R(t) - N(t))
$$
$$
\frac{dR}{dt} = \delta - N(t)
$$

with an varying EROI ($\theta$)

$$
\theta_t = (1 - P) * ((2 * \theta_{max} - \theta_0 + \sqrt{(2 * \theta_{max} - \theta_0)^2 - \theta_0^2}) * P + \theta_0)
$$

where

$$
P = \frac{(R_0 + \delta * t - R(t))}{(R_0 + \delta * t)}
$$
*Variables*:

$N$: flux value

$R$: reserve of the critical resource

$P$: normalized cumulative production

$k_{Malthus}$: Malthusian rate constant

$k_{conversion}$: critical resource conversion rate constant

$\theta_{0}$: initial EROI value for critical resource

$\theta_{max}$: maximum EROI value for critical resource

$\delta$: replenishment rate of the critical resource

$R_0$: initial reserve of the critical resource

#### Implementation

```{r}
# parameters
qm2_pars <- c(
  k_Malthus = 1, 
  k_conversion = 1, 
  theta_0 = 2,
  theta_max = 5,
  delta = 0,
  R_0 = 300
  )

qm2_pars_text <- paste(names(qm2_pars), qm2_pars, sep = " = ", collapse = "\n")

# initial state 
qm2_init <- c(N = 1, R = 300)

# times
qm2_times <- seq(0, 5, by = 0.001)
```

```{r}
qm2_model <- function(pars, init, times = times) {
  # initial state 
  state <- init
  # derivative
  deriv <- function(t, state, pars) {
    with(as.list(c(state, pars)), {
      P = (R_0+delta*t-R)/(R_0+delta*t)
      theta_t = (1 - P) * ((2 * theta_max-theta_0 + sqrt((2 * theta_max - theta_0)^2 - theta_0^2)) * P + theta_0)
      d_N <- k_Malthus * N * (k_conversion * (theta_t - 1) * R - N)
      #maxN = min(c(N, R)) ### prevent negative R
      d_R <- delta - N
      return(list(c(N = d_N, R = d_R)))
    })
  }
  # solve
  ode(y = state, times = times, func = deriv, parms = pars)
}
qm2_results <- data.frame(qm2_model(pars = qm2_pars, init = qm2_init, times = qm2_times))
```

```{r}
maxX = qm2_results$time[length(qm2_results$time)]
maxY = max(c(qm2_results$N, qm2_results$R))

ggplot(data = qm2_results, aes(x = time)) +
  geom_line(data = qm2_results, aes(x = time, y = N, color = "N")) +
  geom_line(data = qm2_results, aes(x = time, y = R, color = "R")) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  theme_bw() +
  theme(
    axis.title = element_text(size = plotScale * 10),
    axis.text = element_text(size = plotScale * 10)
  ) +
  annotate("text",
           x = 0.7 * maxX, 
           y = 0.8 * maxY,
           label = qm2_pars_text, 
           size = 5, 
           hjust = 0, 
           vjust = 1) +
  ggtitle("Shenderov model - v2: increasing EROI")
```

### Shenderov model (v2.2, increasing EROI, N-R back conversion, logistic)

#### Description

$$
\frac{dN}{dt} = k_{Malthus} * N(t) * (1 - \frac{N(t)}{k_{conversion} * (\theta_t - 1) * R(t)})
$$
$$
\frac{dR}{dt} = \delta - \frac{N(t)}{k_{conversion} * (\theta_{t} - 1)}
$$

with an varying EROI ($\theta$)

$$
\theta_t = (1 - P) * ((2 * \theta_{max} - \theta_0 + \sqrt{(2 * \theta_{max} - \theta_0)^2 - \theta_0^2}) * P + \theta_0)
$$

where

$$
P = \frac{(R_0 + \delta * t - R(t))}{(R_0 + \delta * t)}
$$
*Variables*:

$N$: flux value

$R$: reserve of the critical resource

$P$: normalized cumulative production

$k_{Malthus}$: Malthusian rate constant

$k_{conversion}$: critical resource conversion rate constant

$\theta_{0}$: initial EROI value for critical resource

$\theta_{max}$: maximum EROI value for critical resource

$\delta$: replenishment rate of the critical resource

$R_0$: initial reserve of the critical resource

#### Implementation

```{r}
# parameters
qm22_pars <- c(
  k_Malthus = 1, 
  k_conversion = 1, 
  theta_0 = 2,
  theta_max = 5,
  delta = 0,
  R_0 = 300
  )

qm22_pars_text <- paste(names(qm22_pars), qm22_pars, sep = " = ", collapse = "\n")

# initial state 
qm22_init <- c(N = 1, R = 300)

# times
qm22_times <- seq(0, 20, by = 0.1)
```

```{r}
qm22_model <- function(pars, init, times = times) {
  # initial state 
  state <- init
  # derivative
  deriv <- function(t, state, pars) {
    with(as.list(c(state, pars)), {
      P = (R_0+delta*t-R)/(R_0+delta*t)
      theta_t = (1 - P) * ((2 * theta_max-theta_0 + sqrt((2 * theta_max - theta_0)^2 - theta_0^2)) * P + theta_0)
      N_max = k_conversion * (theta_t - 1) * R
      d_N <- k_Malthus * N * (1 - N / N_max)
      d_R <- delta - N / (k_conversion * (theta_t - 1))
      return(list(c(N = d_N, R = d_R)))
    })
  }
  # solve
  ode(y = state, times = times, func = deriv, parms = pars)
}
qm22_results <- data.frame(qm22_model(pars = qm22_pars, init = qm22_init, times = qm22_times))
```

```{r}
maxX = qm22_results$time[length(qm22_results$time)]
maxY = max(c(qm22_results$N, qm22_results$R))

ggplot(data = qm22_results, aes(x = time)) +
  geom_line(data = qm22_results, aes(x = time, y = N, color = "N")) +
  geom_line(data = qm22_results, aes(x = time, y = R, color = "R")) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  theme_bw() +
  theme(
    axis.title = element_text(size = plotScale * 10),
    axis.text = element_text(size = plotScale * 10)
  ) +
  annotate("text",
           x = 0.7 * maxX, 
           y = 0.8 * maxY,
           label = qm22_pars_text, 
           size = 5, 
           hjust = 0, 
           vjust = 1) +
  ggtitle("Shenderov model - v2.2: increasing EROI, N-R back conversion, logistic")
```

---

### v2

```{r}
# parameters
pars_v2 <- c(
  # E
  intrinsicGrowthRate = 0.2, 
  conversionRate = 0.2, 
  explorationBudgetShare = 0.1, 
  # R
  eroi = 30,
  recoveryRate = 0.0001
  )

# initial state 
init_v2 <- c(E = 1, R = 1E4)

# times
times_v2 <- seq(0, 2000, by = 1)
```

```{r}
lv_model_v2 <- function(pars, init = init_v2, times = times_v2) {
  # initial state 
  state <- init_v2
  # derivative
  deriv <- function(t, state, pars_v2) {
    with(as.list(c(state, pars_v2)), {
      Emax = conversionRate * R * (1 - explorationBudgetShare)
      d_E <- intrinsicGrowthRate * E * (1 - E / Emax)
      d_R <- recoveryRate - (conversionRate * E / eroi)
      return(list(c(E = d_E, R = d_R)))
    })
  }
  # solve
  ode(y = state, times = times_v2, func = deriv, parms = pars_v2)
}
lv_results_v2 <- data.frame(lv_model_v2(pars = pars_v2, init = init_v2, times = times_v2))
```

```{r}
ggplot(data = lv_results_v2, aes(x = time)) +
  geom_line(data = lv_results_v2, aes(x = time, y = E, color = "E")) +
  geom_line(data = lv_results_v2, aes(x = time, y = R, color = "R")) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  theme_bw() +
  theme(
    axis.title = element_text(size = plotScale * 10),
    axis.text = element_text(size = plotScale * 10)
  )
```

### v3

```{r}
# parameters
pars_v3 <- c(
  # E
  intrinsicGrowthRate = 0.1, 
  #conversionRate = c(0.2), 
  explorationBudgetShare = 0.1, 
  # R
  eroi = 30,
  recoveryRate = 0.0001
  )

# initial state 
init_v3 <- c(E = 1, R = 1E4)

# times
times_v3 <- seq(0, 200, by = 1)
```

```{r}
lv_model_v3 <- function(pars, init = init_v3, times = times_v3) {
  # initial state 
  state <- init_v3
  # derivative
  deriv <- function(t, state, pars) {
    with(as.list(c(state, pars)), {
      Einvest = E * (1 - explorationBudgetShare)
      Egained = Einvest * eroi
      Eavailable = R / eroi
      Emax = min(Egained, Eavailable)
      d_E <- intrinsicGrowthRate * E * (1 - E / Emax)
      d_R <- recoveryRate - Emax
      return(list(c(E = d_E, R = d_R)))
    })
  }
  # solve
  ode(y = state, times = times_v3, func = deriv, parms = pars_v3)
}
lv_results_v3 <- data.frame(lv_model_v3(pars = pars_v3, init = init_v3, times = times_v3))
```

```{r}
ggplot(data = lv_results_v3, aes(x = time)) +
  geom_line(data = lv_results_v3, aes(x = time, y = E, color = "E")) +
  geom_line(data = lv_results_v3, aes(x = time, y = R, color = "R")) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  coord_trans(y = "sqrt") +
  theme_bw() +
  theme(
    axis.title = element_text(size = plotScale * 10),
    axis.text = element_text(size = plotScale * 10)
  )
```

------------------------------------------------------------------------

# Exploration duds

### v4

```{r}
# parameters
resourcesNames <- c("fossil", "nuclear", "hydro", "wind", "photo")
resourcePars <- data.frame(cbind(
  eroi = c(30, 75, 50, 16, 5),
  recoveryRate = c(1E-6, 1E-6, 1, 1, 1),
  init = c(1E4, 1E2, 1E3, 1E5, 1E9)
  ), row.names = resourcesNames)

paradigmNames <- c("A", "B", "C")
paradigmPars <- data.frame(cbind(
  fossil = c(0.8, 0.6, 0),
  nuclear = c(0, 0.1, 0),
  hydro = c(0.1, 0.2, 0.2),
  wind = c(0.1, 0.1, 0.4),
  photo = c(0, 0, 0.4)
  ), row.names = paradigmNames)

pars_v4 <- list(
  # civilization
  intrinsicGrowthRate = 0.1, 
  explorationBudgetShare = 0.2,
  # resources
  budgetShares = vector(mode = "list", length = length(paradigmNames)),
  eroi = vector(mode = "list", length = length(resourcesNames)),
  recoveryRate = vector(mode = "list", length = length(resourcesNames))
  )
names(pars_v4$budgetShares) <- paradigmNames
names(pars_v4$eroi) <- resourcesNames
names(pars_v4$recoveryRate) <- resourcesNames
for (resourceName in resourcesNames)
{
  pars_v4$eroi[[resourceName]] <- resourcePars[resourceName,]$eroi
  pars_v4$recoveryRate[[resourceName]] <- resourcePars[resourceName,]$recoveryRate
}
for (paradigmName in paradigmNames)
{
  for (resourceName in resourcesNames)
  {
    pars_v4$budgetShares[[paradigmName]][[resourceName]] <- paradigmPars[paradigmName,][resourceName]
  }
}

# initial state 
init_v4 <- vector(mode = "list", length = length(resourcesNames)+1)
names(init_v4) <- c("E", resourcesNames)
init_v4$E <- 1
for (resourceName in resourcesNames)
{
  init_v4[[resourceName]] <- resourcePars[resourceName,]$init
}

# times
times_v4 <- seq(0, 200, by = 1)
```

```{r}
lv_model_v4 <- function(pars, init = init_v4, times = times_v4, paradigm) {
  # initial state 
  state <- unlist(init_v4)
  # derivative
  deriv <- function(t, state, pars_v4) {
    with(as.list(c(state, pars_v4)), {
      Einvest = E * (1 - explorationBudgetShare)
      Emax = 0
      d_R <- vector(mode = "list", length = length(resourcesNames))
      names(d_R) <- resourcesNames
      for (resourceName in resourcesNames)
      {
        EinvestOnResource = Einvest * budgetShares[[paradigm]][[resourceName]]
        EgainedByResource = EinvestOnResource * eroi[[resourceName]]
        EavailableFromResource = state[[resourceName]] / eroi[[resourceName]]
        EmaxFromResource = min(EgainedByResource, EavailableFromResource)
        Emax = Emax + EmaxFromResource
        
        d_R[[resourceName]] <- recoveryRate[[resourceName]] - EmaxFromResource
      }
      
      d_E <- intrinsicGrowthRate * E * (1 - E / Emax)
      
      # if (paradigm < length(paradigmNames) & runif(1) < explorationBudgetShare) {
      #   paradigm <- paradigm + 1
      # }
      #print(paradigm)
      return(list(c(E = d_E,
                    fossil = d_R[["fossil"]],
                    nuclear = d_R[["nuclear"]],
                    hydro = d_R[["hydro"]],
                    wind = d_R[["wind"]],
                    photo = d_R[["photo"]]
                  ))
             )
    })
  }
  # solve
  ode(y = state, times = times_v4, func = deriv, parms = pars_v4)
}

paradigm <- 1 # index in paradigmNames
lv_results_v4_paradigm1 <- data.frame(lv_model_v4(pars = pars_v4, init = init_v4, times = times_v4, paradigm = paradigm))

paradigm <- 2
lv_results_v4_paradigm2 <- data.frame(lv_model_v4(pars = pars_v4, init = init_v4, times = times_v4, paradigm = paradigm))

paradigm <- 3
lv_results_v4_paradigm3 <- data.frame(lv_model_v4(pars = pars_v4, init = init_v4, times = times_v4, paradigm = paradigm))
```

```{r}
ggplot(data = lv_results_v4_paradigm1, aes(x = time)) +
  geom_line(data = lv_results_v4_paradigm1, aes(x = time, y = E, color = "E")) +
  geom_line(data = lv_results_v4_paradigm1, aes(x = time, y = fossil, color = "fossil")) +
  geom_line(data = lv_results_v4_paradigm1, aes(x = time, y = nuclear, color = "nuclear")) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  coord_trans(y = "sqrt") +
  theme_bw() +
  theme(
    axis.title = element_text(size = plotScale * 10),
    axis.text = element_text(size = plotScale * 10)
  )

plot
```

```{r}
ggplot(data = lv_results_v4_paradigm2, aes(x = time)) +
  geom_line(data = lv_results_v4_paradigm2, aes(x = time, y = E, color = "E")) +
  geom_line(data = lv_results_v4_paradigm2, aes(x = time, y = fossil, color = "fossil")) +
  geom_line(data = lv_results_v4_paradigm2, aes(x = time, y = nuclear, color = "nuclear")) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  coord_trans(y = "sqrt") +
  theme_bw() +
  theme(
    axis.title = element_text(size = plotScale * 10),
    axis.text = element_text(size = plotScale * 10)
  )

plot
```

```{r}
ggplot(data = lv_results_v4_paradigm3, aes(x = time)) +
  geom_line(data = lv_results_v4_paradigm3, aes(x = time, y = E, color = "E")) +
  geom_line(data = lv_results_v4_paradigm3, aes(x = time, y = fossil, color = "fossil")) +
  geom_line(data = lv_results_v4_paradigm3, aes(x = time, y = nuclear, color = "nuclear")) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  coord_trans(y = "sqrt") +
  theme_bw() +
  theme(
    axis.title = element_text(size = plotScale * 10),
    axis.text = element_text(size = plotScale * 10)
  )

plot
```
